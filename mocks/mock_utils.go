// Code generated by MockGen. DO NOT EDIT.
// Source: utils/utils.go
//
// Generated by this command:
//
//	mockgen -source utils/utils.go -destination mocks/mock_utils.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockUtils) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockUtilsMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockUtils)(nil).Now))
}

// OpenBrowser mocks base method.
func (m *MockUtils) OpenBrowser(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenBrowser", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenBrowser indicates an expected call of OpenBrowser.
func (mr *MockUtilsMockRecorder) OpenBrowser(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenBrowser", reflect.TypeOf((*MockUtils)(nil).OpenBrowser), url)
}
