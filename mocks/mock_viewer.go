// Code generated by MockGen. DO NOT EDIT.
// Source: view/viewer.go
//
// Generated by this command:
//
//	mockgen -source view/viewer.go -destination mocks/mock_viewer.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	globalping "github.com/jsdelivr/globalping-cli/globalping"
	gomock "go.uber.org/mock/gomock"
)

// MockViewer is a mock of Viewer interface.
type MockViewer struct {
	ctrl     *gomock.Controller
	recorder *MockViewerMockRecorder
}

// MockViewerMockRecorder is the mock recorder for MockViewer.
type MockViewerMockRecorder struct {
	mock *MockViewer
}

// NewMockViewer creates a new mock instance.
func NewMockViewer(ctrl *gomock.Controller) *MockViewer {
	mock := &MockViewer{ctrl: ctrl}
	mock.recorder = &MockViewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewer) EXPECT() *MockViewerMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m_2 *MockViewer) Output(id string, m *globalping.MeasurementCreate) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Output", id, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockViewerMockRecorder) Output(id, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockViewer)(nil).Output), id, m)
}

// OutputInfinite mocks base method.
func (m_2 *MockViewer) OutputInfinite(m *globalping.Measurement) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "OutputInfinite", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputInfinite indicates an expected call of OutputInfinite.
func (mr *MockViewerMockRecorder) OutputInfinite(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputInfinite", reflect.TypeOf((*MockViewer)(nil).OutputInfinite), m)
}

// OutputShare mocks base method.
func (m *MockViewer) OutputShare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputShare")
}

// OutputShare indicates an expected call of OutputShare.
func (mr *MockViewerMockRecorder) OutputShare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputShare", reflect.TypeOf((*MockViewer)(nil).OutputShare))
}

// OutputSummary mocks base method.
func (m *MockViewer) OutputSummary() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputSummary")
}

// OutputSummary indicates an expected call of OutputSummary.
func (mr *MockViewerMockRecorder) OutputSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputSummary", reflect.TypeOf((*MockViewer)(nil).OutputSummary))
}
