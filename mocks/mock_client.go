// Code generated by MockGen. DO NOT EDIT.
// Source: globalping/client.go
//
// Generated by this command:
//
//	mockgen -source globalping/client.go -destination mocks/mock_client.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	globalping "github.com/jsdelivr/globalping-cli/globalping"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateMeasurement mocks base method.
func (m *MockClient) CreateMeasurement(measurement *globalping.MeasurementCreate) (*globalping.MeasurementCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeasurement", measurement)
	ret0, _ := ret[0].(*globalping.MeasurementCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeasurement indicates an expected call of CreateMeasurement.
func (mr *MockClientMockRecorder) CreateMeasurement(measurement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeasurement", reflect.TypeOf((*MockClient)(nil).CreateMeasurement), measurement)
}

// GetMeasurement mocks base method.
func (m *MockClient) GetMeasurement(id string) (*globalping.Measurement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurement", id)
	ret0, _ := ret[0].(*globalping.Measurement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurement indicates an expected call of GetMeasurement.
func (mr *MockClientMockRecorder) GetMeasurement(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurement", reflect.TypeOf((*MockClient)(nil).GetMeasurement), id)
}

// GetMeasurementRaw mocks base method.
func (m *MockClient) GetMeasurementRaw(id string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurementRaw", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurementRaw indicates an expected call of GetMeasurementRaw.
func (mr *MockClientMockRecorder) GetMeasurementRaw(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurementRaw", reflect.TypeOf((*MockClient)(nil).GetMeasurementRaw), id)
}
